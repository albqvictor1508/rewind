/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './pages/__root'
import { Route as UserRouteImport } from './pages/_user'
import { Route as AuthRouteImport } from './pages/_auth'
import { Route as AppRouteImport } from './pages/_app'
import { Route as UserProfileRouteImport } from './pages/_user/profile'
import { Route as UserMymoviesRouteImport } from './pages/_user/mymovies'
import { Route as AuthSignupRouteImport } from './pages/_auth/signup'
import { Route as AuthSigninRouteImport } from './pages/_auth/signin'
import { Route as AuthCodeRouteImport } from './pages/_auth/code'
import { Route as AuthChangePasswordRouteImport } from './pages/_auth/change-password'
import { Route as AppSearchRouteImport } from './pages/_app/search'
import { Route as AppHomeRouteImport } from './pages/_app/home'

const UserRoute = UserRouteImport.update({
  id: '/_user',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRoute = AppRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const UserProfileRoute = UserProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => UserRoute,
} as any)
const UserMymoviesRoute = UserMymoviesRouteImport.update({
  id: '/mymovies',
  path: '/mymovies',
  getParentRoute: () => UserRoute,
} as any)
const AuthSignupRoute = AuthSignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => AuthRoute,
} as any)
const AuthSigninRoute = AuthSigninRouteImport.update({
  id: '/signin',
  path: '/signin',
  getParentRoute: () => AuthRoute,
} as any)
const AuthCodeRoute = AuthCodeRouteImport.update({
  id: '/code',
  path: '/code',
  getParentRoute: () => AuthRoute,
} as any)
const AuthChangePasswordRoute = AuthChangePasswordRouteImport.update({
  id: '/change-password',
  path: '/change-password',
  getParentRoute: () => AuthRoute,
} as any)
const AppSearchRoute = AppSearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => AppRoute,
} as any)
const AppHomeRoute = AppHomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => AppRoute,
} as any)

export interface FileRoutesByFullPath {
  '/home': typeof AppHomeRoute
  '/search': typeof AppSearchRoute
  '/change-password': typeof AuthChangePasswordRoute
  '/code': typeof AuthCodeRoute
  '/signin': typeof AuthSigninRoute
  '/signup': typeof AuthSignupRoute
  '/mymovies': typeof UserMymoviesRoute
  '/profile': typeof UserProfileRoute
}
export interface FileRoutesByTo {
  '/home': typeof AppHomeRoute
  '/search': typeof AppSearchRoute
  '/change-password': typeof AuthChangePasswordRoute
  '/code': typeof AuthCodeRoute
  '/signin': typeof AuthSigninRoute
  '/signup': typeof AuthSignupRoute
  '/mymovies': typeof UserMymoviesRoute
  '/profile': typeof UserProfileRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_app': typeof AppRouteWithChildren
  '/_auth': typeof AuthRouteWithChildren
  '/_user': typeof UserRouteWithChildren
  '/_app/home': typeof AppHomeRoute
  '/_app/search': typeof AppSearchRoute
  '/_auth/change-password': typeof AuthChangePasswordRoute
  '/_auth/code': typeof AuthCodeRoute
  '/_auth/signin': typeof AuthSigninRoute
  '/_auth/signup': typeof AuthSignupRoute
  '/_user/mymovies': typeof UserMymoviesRoute
  '/_user/profile': typeof UserProfileRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/home'
    | '/search'
    | '/change-password'
    | '/code'
    | '/signin'
    | '/signup'
    | '/mymovies'
    | '/profile'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/home'
    | '/search'
    | '/change-password'
    | '/code'
    | '/signin'
    | '/signup'
    | '/mymovies'
    | '/profile'
  id:
    | '__root__'
    | '/_app'
    | '/_auth'
    | '/_user'
    | '/_app/home'
    | '/_app/search'
    | '/_auth/change-password'
    | '/_auth/code'
    | '/_auth/signin'
    | '/_auth/signup'
    | '/_user/mymovies'
    | '/_user/profile'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AppRoute: typeof AppRouteWithChildren
  AuthRoute: typeof AuthRouteWithChildren
  UserRoute: typeof UserRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_user': {
      id: '/_user'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof UserRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_user/profile': {
      id: '/_user/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof UserProfileRouteImport
      parentRoute: typeof UserRoute
    }
    '/_user/mymovies': {
      id: '/_user/mymovies'
      path: '/mymovies'
      fullPath: '/mymovies'
      preLoaderRoute: typeof UserMymoviesRouteImport
      parentRoute: typeof UserRoute
    }
    '/_auth/signup': {
      id: '/_auth/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof AuthSignupRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/signin': {
      id: '/_auth/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof AuthSigninRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/code': {
      id: '/_auth/code'
      path: '/code'
      fullPath: '/code'
      preLoaderRoute: typeof AuthCodeRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/change-password': {
      id: '/_auth/change-password'
      path: '/change-password'
      fullPath: '/change-password'
      preLoaderRoute: typeof AuthChangePasswordRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_app/search': {
      id: '/_app/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof AppSearchRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/home': {
      id: '/_app/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof AppHomeRouteImport
      parentRoute: typeof AppRoute
    }
  }
}

interface AppRouteChildren {
  AppHomeRoute: typeof AppHomeRoute
  AppSearchRoute: typeof AppSearchRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppHomeRoute: AppHomeRoute,
  AppSearchRoute: AppSearchRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

interface AuthRouteChildren {
  AuthChangePasswordRoute: typeof AuthChangePasswordRoute
  AuthCodeRoute: typeof AuthCodeRoute
  AuthSigninRoute: typeof AuthSigninRoute
  AuthSignupRoute: typeof AuthSignupRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthChangePasswordRoute: AuthChangePasswordRoute,
  AuthCodeRoute: AuthCodeRoute,
  AuthSigninRoute: AuthSigninRoute,
  AuthSignupRoute: AuthSignupRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface UserRouteChildren {
  UserMymoviesRoute: typeof UserMymoviesRoute
  UserProfileRoute: typeof UserProfileRoute
}

const UserRouteChildren: UserRouteChildren = {
  UserMymoviesRoute: UserMymoviesRoute,
  UserProfileRoute: UserProfileRoute,
}

const UserRouteWithChildren = UserRoute._addFileChildren(UserRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AppRoute: AppRouteWithChildren,
  AuthRoute: AuthRouteWithChildren,
  UserRoute: UserRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
